<#--

Copyright (C) 2011-2015 Spring Agile

This file is part of Code Generator.

-->
/*
 * Copyright (C) 2016-2017 Spring Agile. All rights reserved.
 * Licensed under the Apache License, Version 2.0
 */
package com.agile.model;

<#if hasDateType>	
import java.util.Date;
</#if>
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import com.agile.framework.persistence.BaseEntity;

// THIS CODE IS GENERATED BY CODE GENERATOR.

@Table(name="${tableName}")
@Entity
public class ${className} extends BaseEntity {
	
	private static final long serialVersionUID = 1L;
	
	<#list columns as column>
	private ${column.javaType.simpleName} ${column.javaName};
	</#list>

	public ${className}() {
	
	}

	<#if primaryKey??>	
	public ${className}(${primaryKey.javaType.simpleName} ${primaryKey.javaName}){
		this.${primaryKey.javaName} = ${primaryKey.javaName};
	}
	</#if>	
	<#list columns as column>
    <#assign method=column.javaName?cap_first>
    <#assign field=column.javaName>
    
	<#if column.primaryKey>
    @Id
    <#if column.autoIncrement>
    @GeneratedValue(strategy = GenerationType.AUTO)
    <#else>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    </#if>
	</#if>
    @Column(name="${column.name}", <#if column.sqlTypeName == "CHAR">columnDefinition="char",</#if><#if column.sqlTypeName == "VARCHAR">columnDefinition="varchar",</#if><#if column.sqlTypeName == "TINYTEXT">columnDefinition="mediumtext",</#if><#if column.sqlTypeName == "TEXT">columnDefinition="varchar",</#if><#if column.sqlTypeName == "MEDIUMTEXT">columnDefinition="mediumtext",</#if><#if column.sqlTypeName == "LONGTEXT">columnDefinition="longtext",</#if><#if column.sqlTypeName == "DATE">columnDefinition="date",</#if><#if column.sqlTypeName == "TIME">columnDefinition="time",</#if><#if column.sqlTypeName == "YEAR">columnDefinition="year",</#if><#if column.sqlTypeName == "DATETIME">columnDefinition="datetime",</#if><#if column.sqlTypeName == "TIMESTAMP">columnDefinition="timestamp",</#if><#if column.sqlTypeName == "BIT">columnDefinition="bit",</#if><#if column.sqlTypeName == "TINYINT">columnDefinition="tinyint",</#if><#if column.sqlTypeName == "SMALLINT">columnDefinition="smallint",</#if><#if column.sqlTypeName == "MEDIUMINT">columnDefinition="mediumint",</#if><#if column.sqlTypeName == "INT">columnDefinition="int",</#if><#if column.sqlTypeName == "BIGINT">columnDefinition="bigint",</#if><#if column.sqlTypeName == "FLOAT">columnDefinition="float",</#if><#if column.sqlTypeName == "DOUBLE">columnDefinition="double",</#if><#if column.sqlTypeName == "DECIMAL">columnDefinition="decimal",</#if><#if column.sqlTypeName == "VARBINARY">columnDefinition="varbinary",</#if><#if column.sqlTypeName == "BINARY">columnDefinition="binary",</#if><#if column.sqlTypeName == "TINYBLOB">columnDefinition="tinyblob",</#if><#if column.sqlTypeName == "BLOB">columnDefinition="blob",</#if><#if column.sqlTypeName == "MEDIUMBLOB">columnDefinition="mediumblob",</#if><#if column.sqlTypeName == "LOGNGBLOB">columnDefinition="longblob",</#if> nullable = <#if column.sqlNotNull>false<#else>true</#if>, length = ${column.sqlColumnSize?c})
	public ${column.javaType.simpleName} get${method}(){
		return ${field};
	}

	public void set${method}(${column.javaType.simpleName} ${field}){
		this.${field} = ${field};
	}
	</#list>
}
